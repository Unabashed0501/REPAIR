"""
Patch Generator Agent

This agent is responsible for locating files that contain bugs in the codebase.
"""

from google.adk.agents import LlmAgent

# --- Constants ---
GEMINI_MODEL = "gemini-2.0-flash"

def generate_patch(original: str, replacement: str, file_path: str) -> str:
    """
    Generate a diff string between the original and replacement code.
    
    Args:
        original (str): The original code snippet.
        replacement (str): The replacement code snippet.
        
    Returns:
        str: The patch.
    """
    import difflib
    diff = difflib.unified_diff(
        original.splitlines(keepends=True),
        replacement.splitlines(keepends=True),
        fromfile=f"a/{file_path}",
        tofile=f"b/{file_path}",
        lineterm=""
    )
    return {"patch": ''.join(diff)}

# --- Agent Definition ---
patch_generator_agent = LlmAgent(
    name="PatchGeneratorAgent",
    model=GEMINI_MODEL,
    instruction="""You are a Patch Generator Agent.

        Your task is to identify and fix bugs in code snippets based on the given context and bug description.

        You will receive the following information from the File Locator Agent:
        - File path: <file_path>
        - File contents: <file_contents>
        - Bug description(s): <bug_descriptions>

        Follow these steps:

        1. Carefully read the file contents and bug description.
        2. Identify the exact portion of the code that contains the bug.
        3. Prepare:
        - `original`: the exact code snippet (as-is) that needs to be fixed
        - `replacement`: your corrected version of that snippet

        4. Use the `generate_patch` tool to create a `patch` from the `original` and `replacement`.

        5. Return a JSON object with:
        - `patch`: the diff string generated by the `generate_patch` tool
        - `description`: a concise explanation of the fix you applied

        ⚠️ Notes:
        - The `original` and `replacement` must be **exactly what appears** in the file and your proposed fix.
        - The patch must only reflect the necessary change. Avoid unrelated edits.

        Your final output must be a JSON object with the following keys:
        - `patch`: string showing the generated diff
        - `description`: brief explanation of the fix
    """,
    description="Generates a patch for the given code.",
    tools=[generate_patch],
    output_key="patch"
)
